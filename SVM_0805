{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNSSuIq/CXY9xTWE3OfS0it"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BquTFeGIkuqP","executionInfo":{"status":"ok","timestamp":1754959898758,"user_tz":-540,"elapsed":50289,"user":{"displayName":"구경모","userId":"17143731857543251051"}},"outputId":"36a932dd-fae4-4cfe-c6cf-c827a2846dca"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n","현재 작업 디렉토리: /content/drive/MyDrive/adonet_data 현재 디바이스: cpu\n"]}],"source":["#import 및 csv\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","from tqdm import trange\n","import math\n","import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","from torch.utils.data import TensorDataset, DataLoader\n","from sklearn.preprocessing import LabelEncoder\n","import copy\n","import torch._dynamo\n","import torch.nn.functional as F\n","from google.colab import drive\n","import os\n","import random\n","from sklearn.svm import SVC\n","from sklearn.metrics import accuracy_score\n","from sklearn.model_selection import train_test_split\n","\n","drive.mount('/content/drive')\n","os.chdir('/content/drive/MyDrive/adonet_data')\n","\n","device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n","print(f\"현재 작업 디렉토리: {os.getcwd()} 현재 디바이스: {device}\")\n","pd.set_option('display.max_rows',    None)\n","pd.set_option('display.max_columns', None)\n","\n","csv_path_door= ('door_imputed_same_perOSN_dist.csv')\n","doorset = pd.read_csv(csv_path_door)\n","\n","csv_path_cnt= ('Olfactory_Connection_NT.csv')\n","cntset = pd.read_csv(csv_path_cnt)\n","\n","csv_path_ann= ('DoOR_data.csv')\n","X_ann = pd.read_csv(csv_path_ann,index_col=0)"]},{"cell_type":"code","source":["#사전작업\n","ff=cntset[cntset[\"directionality\"]=='feedforward']\n","otp=ff[(ff[\"pre_class\"]=='ORN') & (ff[\"post_class\"]=='ALPN')]\n","counts=otp[\"pre_root_id\"].value_counts()\n","otp_cnt=len(counts.index)\n","otp_idx=counts.index\n","counts=otp[\"post_root_id\"].value_counts()\n","otp_cnt2=len(counts.index)\n","otp_idx2=counts.index\n","ptk=ff[(ff['pre_class']=='ALPN') & (ff['post_class']=='KC')]\n","print(ptk.shape)\n","counts=ptk[\"pre_root_id\"].value_counts()\n","ptk_cnt=len(counts.index)\n","ptk_idx=counts.index\n","print(ptk_idx)\n","counts=ptk[\"post_root_id\"].value_counts()\n","ptk_cnt2=len(counts.index)\n","ptk_idx2=counts.index\n","print(ptk_idx2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"id":"nJQ7Y_lBlAGg","executionInfo":{"status":"ok","timestamp":1754959903560,"user_tz":-540,"elapsed":583,"user":{"displayName":"구경모","userId":"17143731857543251051"}},"outputId":"49ef3bab-92e4-458b-8805-794e97a4ce07"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["(29343, 8)\n","Index([720575940618308825, 720575940622726271, 720575940637056887,\n","       720575940619071005, 720575940630770042, 720575940621529435,\n","       720575940615366055, 720575940609460491, 720575940623528925,\n","       720575940611079236,\n","       ...\n","       720575940628514647, 720575940615255993, 720575940612468594,\n","       720575940613058802, 720575940632720026, 720575940633356883,\n","       720575940614326162, 720575940610658766, 720575940610070442,\n","       720575940610511043],\n","      dtype='int64', name='pre_root_id', length=334)\n","Index([720575940606892674, 720575940623546638, 720575940625175845,\n","       720575940620684014, 720575940629127936, 720575940629074540,\n","       720575940646602372, 720575940628808186, 720575940610618341,\n","       720575940638691200,\n","       ...\n","       720575940620333958, 720575940628431042, 720575940626855171,\n","       720575940625507888, 720575940614311842, 720575940631774776,\n","       720575940632437331, 720575940609169762, 720575940610370201,\n","       720575940633023935],\n","      dtype='int64', name='post_root_id', length=4907)\n"]}]},{"cell_type":"code","source":["#-----------ORN to ALPN mask: 'mask_otp'-----------------\n","otp_unique = otp[['pre_root_id','post_root_id']]\n","mask_otp_norm = pd.crosstab(\n","    index=otp_unique['pre_root_id'],    # Row: ORN ID\n","    columns=otp_unique['post_root_id']  # Column: ALPN ID\n","    , values=otp['syn_count']           # syn count\n","    , aggfunc='sum'\n","    ).fillna(0)                         #NaN = 0\n","\n","mask_otp = torch.from_numpy(mask_otp_norm.T.values).float().to(device)  # (615, 2278)\n","\n","#------------ALPN to KC mask: 'mask_ptk'-----------------\n","alpn_ids=mask_otp_norm.columns\n","\n","ptk_unique=ptk[['pre_root_id', 'post_root_id']]\n","mask_ptk_norm = (\n","    pd.crosstab(\n","        index=ptk_unique['pre_root_id'],    # Row: ALPN ID\n","        columns=ptk_unique['post_root_id'], # Column: KC ID\n","        values=ptk['syn_count'],\n","        aggfunc='sum'\n","    )\n","    .reindex(index=alpn_ids,   # Make ALPN ID 615\n","             fill_value=0)\n","    .fillna(0)                 # NaN = 0\n",")\n","mask_ptk = torch.from_numpy(mask_ptk_norm.T.values).float().to(device)  # (4907,334)\n","\n","\n","#-----------Neormalization by Max: 'mask_otp_n' & 'mask_ptk_n'------\n","def normalize_by_max_(x):\n","    y=x/x.max()\n","    return y\n","mask_otp_n=normalize_by_max_(mask_otp)\n","mask_ptk_n=normalize_by_max_(mask_ptk)\n","\n","#-----------------------MaskedLinear()----------------------------\n","class MaskedLinear(nn.Module):\n","    def __init__(self, in_features, out_features, weight):\n","        super().__init__()\n","        self.weight = nn.Parameter(weight)\n","        self.bias   = nn.Parameter(torch.zeros(out_features))\n","\n","        self.register_buffer('mask', weight>0)    # +1/-1/0 mask\n","\n","    def forward(self, x):\n","        w = self.weight * self.mask\n","        # Use functional linear transformation\n","        return torch.nn.functional.linear(x, w, self.bias)\n","\n","#---------------------Odor Classifier()---------------------------\n","class Odor_classifier(nn.Module):\n","  def __init__(self,input_dim,output_dim, mask1, mask2):\n","    super().__init__()\n","    self.net=nn.Sequential(\n","        MaskedLinear(input_dim,615, mask1),\n","        nn.ReLU(),\n","        MaskedLinear(615,4907, mask2),\n","        nn.ReLU(),\n","        nn.Linear(4907,output_dim)\n","    )\n","  def forward(self, x):\n","    return self.net(x)\n","\n","# alpn, kc layer output 추출 모델 정의 및 인덱스 정의\n","def layer_output_extract(model, x):\n","  alpn_output = model.net[0](x)\n","  alpn_output_relu = model.net[1](alpn_output)\n","  kc_output = model.net[2](alpn_output_relu)\n","  kc_output_relu = model.net[3](kc_output)\n","  return alpn_output,alpn_output_relu , kc_output, kc_output_relu\n","\n","\n","C_list = [ 0.1, 1, 10, 100]\n","all_results_syn = []\n","\n","for i in range(10):\n","    # 시드 고정 (각 반복마다 다르게)\n","    random.seed(i)\n","    np.random.seed(i)\n","    torch.manual_seed(i)\n","    torch.cuda.manual_seed_all(i)\n","\n","    # 2. 라벨 생성 및 인코딩\n","    cls_labels = [f'Odor_({j+1})' for j in range(250)]\n","    le = LabelEncoder()\n","    y_int = le.fit_transform(cls_labels)\n","    y_out = torch.tensor(y_int, dtype=torch.long)\n","\n","    model = Odor_classifier(input_dim=2278, output_dim=250, mask1=mask_otp_n, mask2=mask_ptk_n).to(device)\n","    criterion = nn.CrossEntropyLoss()\n","    optimizer = optim.Adam(model.parameters(), lr=1e-4)\n","\n","\n","    x_train=[]\n","    y_train=[]\n","\n","    # 0 ~ 249 중에서 2000개 무작위 선택 (중복 허용)\n","    arr2_train = np.random.choice(250, size=2000, replace=True)\n","\n","    for n in arr2_train:\n","        noise = torch.normal(mean=0, std=0.2, size=(2278,))\n","        xi = pd.to_numeric(X_ann.iloc[n, :], errors='coerce')\n","        xn = torch.tensor(xi.fillna(0).values, dtype=torch.float32) + noise\n","        x_train.append(xn)\n","        y_train.append(y_out[n])\n","\n","\n","\n","    # 4. feature projection (ORN → ALPN → KC)\n","    ALPN_output,ALPN_output_relu ,KC_output, KC_output_relu = layer_output_extract(model,torch.stack(x_train).to(device)) # Added torch.stack\n","    y_train = torch.stack(y_train) # Added torch.stack\n","\n","\n","    KC_output = KC_output.cpu().detach().numpy()\n","    KC_output_relu = KC_output_relu.cpu().detach().numpy()\n","    kc_df = pd.DataFrame(KC_output)\n","    kc_relu_df = pd.DataFrame(KC_output_relu)\n","\n","\n","    # 5. SVM 평가 (train/test 나누지 않고 전체로)\n","    y_train = y_train.cpu().numpy()\n","    X_tr, X_te, y_tr, y_te = train_test_split(kc_relu_df, y_train, test_size=0.3)\n","\n","    results = {}\n","    for C in C_list:\n","        clf = SVC(C=C, kernel='linear')\n","        clf.fit(X_tr, y_tr)\n","        acc = clf.score(X_te, y_te)\n","        results[C] = acc\n","\n","    all_results_syn.append(results)\n","    print(f\"{i+1}번째 split 결과:\", results)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":396},"id":"ayC8_ntqlYXI","executionInfo":{"status":"error","timestamp":1754961935649,"user_tz":-540,"elapsed":48023,"user":{"displayName":"구경모","userId":"17143731857543251051"}},"outputId":"b54a9e86-8856-417a-f607-c009664a0b25"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["1번째 split 결과: {0.1: 0.9266666666666666, 1: 0.9266666666666666, 10: 0.9266666666666666, 100: 0.9266666666666666}\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m/tmp/ipython-input-2378544367.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    127\u001b[0m         \u001b[0mclf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mSVC\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mC\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mC\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkernel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'linear'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    128\u001b[0m         \u001b[0mclf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_tr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_tr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 129\u001b[0;31m         \u001b[0macc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mclf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscore\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_te\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_te\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    130\u001b[0m         \u001b[0mresults\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mC\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0macc\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    131\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/base.py\u001b[0m in \u001b[0;36mscore\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m    570\u001b[0m         \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m\u001b[0mmetrics\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0maccuracy_score\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    571\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 572\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0maccuracy_score\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_weight\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msample_weight\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    573\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    574\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/svm/_base.py\u001b[0m in \u001b[0;36mpredict\u001b[0;34m(self, X)\u001b[0m\n\u001b[1;32m    820\u001b[0m             \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0margmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdecision_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    821\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 822\u001b[0;31m             \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    823\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclasses_\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtake\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mintp\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    824\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/svm/_base.py\u001b[0m in \u001b[0;36mpredict\u001b[0;34m(self, X)\u001b[0m\n\u001b[1;32m    436\u001b[0m         \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_for_predict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    437\u001b[0m         \u001b[0mpredict\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sparse_predict\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sparse\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_dense_predict\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 438\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    439\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    440\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_dense_predict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/svm/_base.py\u001b[0m in \u001b[0;36m_dense_predict\u001b[0;34m(self, X)\u001b[0m\n\u001b[1;32m    455\u001b[0m         \u001b[0msvm_type\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mLIBSVM_IMPL\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_impl\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    456\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 457\u001b[0;31m         return libsvm.predict(\n\u001b[0m\u001b[1;32m    458\u001b[0m             \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    459\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msupport_\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","source":["#-----------ORN to ALPN mask: 'mask_otp'-----------------\n","otp_unique = otp[['pre_root_id','post_root_id']]\n","mask_otp_norm = pd.crosstab(\n","    index=otp_unique['pre_root_id'],    # Row: ORN ID\n","    columns=otp_unique['post_root_id']  # Column: ALPN ID\n","    , values=otp['syn_count']           # syn count\n","    , aggfunc='sum'\n","    ).fillna(0)                         #NaN = 0\n","\n","mask_otp = torch.from_numpy(mask_otp_norm.T.values).float().to(device)  # (615, 2278)\n","\n","#------------ALPN to KC mask: 'mask_ptk'-----------------\n","alpn_ids=mask_otp_norm.columns\n","\n","ptk_unique=ptk[['pre_root_id', 'post_root_id']]\n","mask_ptk_norm = (\n","    pd.crosstab(\n","        index=ptk_unique['pre_root_id'],    # Row: ALPN ID\n","        columns=ptk_unique['post_root_id'], # Column: KC ID\n","        values=ptk['syn_count'],\n","        aggfunc='sum'\n","    )\n","    .reindex(index=alpn_ids,   # Make ALPN ID 615\n","             fill_value=0)\n","    .fillna(0)                 # NaN = 0\n",")\n","mask_ptk = torch.from_numpy(mask_ptk_norm.T.values).float().to(device)  # (4907,334)\n","\n","\n","class MaskedLinear(nn.Module):\n","    def __init__(self, in_features, out_features, init_mask):\n","        super().__init__()\n","        self.register_buffer('mask', (init_mask>0).float().to(init_mask.device))\n","        self.weight = nn.Parameter(torch.zeros(out_features, in_features, device=init_mask.device))\n","        self.bias   = nn.Parameter(torch.zeros(out_features, device=init_mask.device))\n","\n","        for i in range(out_features):\n","            conn = self.mask[i] > 0\n","            fan_in = conn.sum().item()\n","            if fan_in > 0:\n","                bound = np.sqrt(6. / fan_in)\n","                # **양수만!**\n","                new_weight = torch.empty(int(fan_in), device=self.weight.device).uniform_(0, bound)\n","                self.weight.data[i, conn] = new_weight\n","\n","    def forward(self, x):\n","        w = self.weight * self.mask\n","        return F.linear(x, w, self.bias)\n","\n","#---------------------Odor Classifier()---------------------------\n","class Odor_classifier(nn.Module):\n","  def __init__(self,input_dim,output_dim, mask1, mask2):\n","    super().__init__()\n","    self.net=nn.Sequential(\n","        MaskedLinear(input_dim,615, mask1),\n","        nn.ReLU(),\n","        MaskedLinear(615,4907, mask2),\n","        nn.ReLU(),\n","        nn.Linear(4907,output_dim)\n","    )\n","  def forward(self, x):\n","    return self.net(x)\n","\n","# alpn, kc layer output 추출 모델 정의 및 인덱스 정의\n","def layer_output_extract(model, x):\n","  alpn_output = model.net[0](x)\n","  alpn_output_relu = model.net[1](alpn_output)\n","  kc_output = model.net[2](alpn_output_relu)\n","  kc_output_relu = model.net[3](kc_output)\n","  return alpn_output,alpn_output_relu , kc_output, kc_output_relu\n","\n","\n","C_list = [ 0.1, 1, 10, 100]\n","all_results_syn = []\n","\n","for i in range(10):\n","    # 시드 고정 (각 반복마다 다르게)\n","    random.seed(i)\n","    np.random.seed(i)\n","    torch.manual_seed(i)\n","    torch.cuda.manual_seed_all(i)\n","\n","    # 2. 라벨 생성 및 인코딩\n","    cls_labels = [f'Odor_({j+1})' for j in range(250)]\n","    le = LabelEncoder()\n","    y_int = le.fit_transform(cls_labels)\n","    y_out = torch.tensor(y_int, dtype=torch.long)\n","\n","    model = Odor_classifier(input_dim=2278, output_dim=250, mask1=mask_otp, mask2=mask_ptk).to(device)\n","    criterion = nn.CrossEntropyLoss()\n","    optimizer = optim.Adam(model.parameters(), lr=1e-4)\n","\n","\n","    x_train=[]\n","    y_train=[]\n","\n","    # 0 ~ 249 중에서 2000개 무작위 선택 (중복 허용)\n","    arr2_train = np.random.choice(250, size=2000, replace=True)\n","\n","    for n in arr2_train:\n","        noise = torch.normal(mean=0, std=0.2, size=(2278,))\n","        xi = pd.to_numeric(X_ann.iloc[n, :], errors='coerce')\n","        xn = torch.tensor(xi.fillna(0).values, dtype=torch.float32) + noise\n","        x_train.append(xn)\n","        y_train.append(y_out[n])\n","\n","\n","\n","    # 4. feature projection (ORN → ALPN → KC)\n","    ALPN_output,ALPN_output_relu ,KC_output, KC_output_relu = layer_output_extract(model,torch.stack(x_train).to(device)) # Added torch.stack\n","    y_train = torch.stack(y_train) # Added torch.stack\n","\n","\n","    KC_output = KC_output.cpu().detach().numpy()\n","    KC_output_relu = KC_output_relu.cpu().detach().numpy()\n","    kc_df = pd.DataFrame(KC_output)\n","    kc_relu_df = pd.DataFrame(KC_output_relu)\n","\n","\n","    # 5. SVM 평가 (train/test 나누지 않고 전체로)\n","    y_train = y_train.cpu().numpy()\n","    X_tr, X_te, y_tr, y_te = train_test_split(kc_relu_df, y_train, test_size=0.3)\n","\n","    results = {}\n","    for C in C_list:\n","        clf = SVC(C=C, kernel='linear')\n","        clf.fit(X_tr, y_tr)\n","        acc = clf.score(X_te, y_te)\n","        results[C] = acc\n","\n","    all_results_syn.append(results)\n","    print(f\"{i+1}번째 split 결과:\", results)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":396},"id":"xwpvA6rIw1C7","executionInfo":{"status":"error","timestamp":1754962051178,"user_tz":-540,"elapsed":47481,"user":{"displayName":"구경모","userId":"17143731857543251051"}},"outputId":"9b5cf9c6-fccf-43e2-c58d-c7ac73a80013"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["1번째 split 결과: {0.1: 0.9716666666666667, 1: 0.9716666666666667, 10: 0.9716666666666667, 100: 0.9716666666666667}\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m/tmp/ipython-input-603398141.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    125\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mC\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mC_list\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    126\u001b[0m         \u001b[0mclf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mSVC\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mC\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mC\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkernel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'linear'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 127\u001b[0;31m         \u001b[0mclf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_tr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_tr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    128\u001b[0m         \u001b[0macc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mclf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscore\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_te\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_te\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    129\u001b[0m         \u001b[0mresults\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mC\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0macc\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/base.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(estimator, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1387\u001b[0m                 )\n\u001b[1;32m   1388\u001b[0m             ):\n\u001b[0;32m-> 1389\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mfit_method\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mestimator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1390\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1391\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/svm/_base.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m    256\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    257\u001b[0m         \u001b[0mseed\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrnd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrandint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miinfo\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"i\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmax\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 258\u001b[0;31m         \u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_weight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msolver_type\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkernel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrandom_seed\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mseed\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    259\u001b[0m         \u001b[0;31m# see comment on the other call to np.iinfo in this file\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    260\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/svm/_base.py\u001b[0m in \u001b[0;36m_dense_fit\u001b[0;34m(self, X, y, sample_weight, solver_type, kernel, random_seed)\u001b[0m\n\u001b[1;32m    334\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit_status_\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    335\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_num_iter\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 336\u001b[0;31m         \u001b[0;34m)\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlibsvm\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    337\u001b[0m             \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    338\u001b[0m             \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","source":["#-----------ORN to ALPN mask: 'mask_otp'-----------------\n","otp_unique = otp[['pre_root_id','post_root_id']]\n","mask_otp_norm = pd.crosstab(\n","    index=otp_unique['pre_root_id'],    # Row: ORN ID\n","    columns=otp_unique['post_root_id']  # Column: ALPN ID\n","    , values=otp['syn_count']           # syn count\n","    , aggfunc='sum'\n","    ).fillna(0)                         #NaN = 0\n","\n","mask_otp = torch.from_numpy(mask_otp_norm.T.values).float().to(device)  # (615, 2278)\n","\n","#------------ALPN to KC mask: 'mask_ptk'-----------------\n","alpn_ids=mask_otp_norm.columns\n","\n","ptk_unique=ptk[['pre_root_id', 'post_root_id']]\n","mask_ptk_norm = (\n","    pd.crosstab(\n","        index=ptk_unique['pre_root_id'],    # Row: ALPN ID\n","        columns=ptk_unique['post_root_id'], # Column: KC ID\n","        values=ptk['syn_count'],\n","        aggfunc='sum'\n","    )\n","    .reindex(index=alpn_ids,   # Make ALPN ID 615\n","             fill_value=0)\n","    .fillna(0)                 # NaN = 0\n",")\n","mask_ptk = torch.from_numpy(mask_ptk_norm.T.values).float().to(device)  # (4907,334)\n","\n","#-----------Structure uniform(PN to KC)---------------------------\n","\n","# 현재 PN→KC 연결 개수\n","mask_np = mask_ptk.cpu().numpy()\n","total_connections = (mask_np > 0).sum()\n","num_kc = mask_np.shape[0]\n","num_pn = mask_np.shape[1]\n","\n","# KC당 균일하게 연결할 PN 개수\n","uniform_degree = (total_connections // num_kc) +100\n","\n","# 새로운 weight 행렬 초기화 (float)\n","uniform_weight = np.zeros_like(mask_np, dtype=np.float32)\n","\n","rng = np.random.default_rng(42)\n","\n","for kc_idx in range(num_kc):\n","    # 무작위로 PN 선택\n","    chosen_pn = rng.choice(num_pn, size=uniform_degree, replace=False)\n","    uniform_weight[kc_idx, chosen_pn] = rng.uniform(low=0, high=1.0, size=uniform_degree)\n","\n","# Tensor 변환\n","mask_ptk_uniform = torch.from_numpy(uniform_weight)\n","\n","#-----------------------MaskedLinear()----------------------------\n","class MaskedLinear(nn.Module):\n","    def __init__(self, in_features, out_features, init_weight):\n","        super().__init__()\n","        self.register_buffer('mask', (init_weight>0).float().to(init_weight.device)) # Ensure mask is on the same device\n","        self.weight = nn.Parameter(torch.zeros(out_features, in_features, device=init_weight.device)) # Initialize weight on the same device\n","        nn.init.uniform_(self.weight, a=0, b=1)\n","        self.bias   = nn.Parameter(torch.zeros(out_features, device=init_weight.device)) # Initialize bias on the same device\n","\n","    def forward(self, x):\n","        w = self.weight * self.mask\n","        return F.linear(x, w, self.bias)\n","\n","#---------------------Odor Classifier()---------------------------\n","class Odor_classifier(nn.Module):\n","  def __init__(self,input_dim,output_dim, mask1, mask2):\n","    super().__init__()\n","    self.net=nn.Sequential(\n","        MaskedLinear(input_dim,615, mask1),\n","        nn.Identity(),\n","        MaskedLinear(615,4907, mask2),\n","        nn.Identity(),\n","        nn.Linear(4907,output_dim)\n","    )\n","  def forward(self, x):\n","    return self.net(x)\n","\n","\n","\n","\n","\n","\n","\n","# alpn, kc layer output 추출 모델 정의 및 인덱스 정의\n","def layer_output_extract(model, x):\n","  alpn_output = model.net[0](x)\n","  alpn_output_relu = model.net[1](alpn_output)\n","  kc_output = model.net[2](alpn_output_relu)\n","  kc_output_relu = model.net[3](kc_output)\n","  return alpn_output,alpn_output_relu , kc_output, kc_output_relu\n","\n","C_list = [0.1, 1, 10, 100]\n","all_results_ran = []\n","\n","for i in range(10):\n","    # 시드 고정 (각 반복마다 다르게)\n","    random.seed(i)\n","    np.random.seed(i)\n","    torch.manual_seed(i)\n","    torch.cuda.manual_seed_all(i)\n","\n","    model = Odor_classifier(input_dim=2278, output_dim=250, mask1=mask_otp, mask2=mask_ptk_uniform).to(device)\n","    criterion = nn.CrossEntropyLoss()\n","    optimizer = optim.Adam(model.parameters(), lr=1e-4)\n","\n","    x_train=[]\n","    y_train=[]\n","\n","\n","      # 2. 라벨 생성 및 인코딩\n","    cls_labels = [f'Odor_({j+1})' for j in range(250)]\n","    le = LabelEncoder()\n","    y_int = le.fit_transform(cls_labels)\n","    y_out = torch.tensor(y_int, dtype=torch.long)\n","\n","        # 0 ~ 249 중에서 2000개 무작위 선택 (중복 허용)\n","    arr2_train = np.random.choice(250, size=500, replace=True)\n","\n","    for n in arr2_train:\n","        noise = torch.normal(mean=0, std=0.2, size=(2278,))\n","        xi = pd.to_numeric(X_ann.iloc[n, :], errors='coerce')\n","        xn = torch.tensor(xi.fillna(0).values, dtype=torch.float32) + noise\n","        x_train.append(xn)\n","        y_train.append(y_out[n])\n","\n","\n","    # 4. feature projection (ORN → ALPN → KC)\n","    ALPN_output,ALPN_output_relu ,KC_output, KC_output_relu = layer_output_extract(model,torch.stack(x_train).to(device)) # Added torch.stack\n","    y_train = torch.stack(y_train) # Added torch.stack\n","\n","\n","    KC_output = KC_output.cpu().detach().numpy()\n","    KC_output_relu = KC_output_relu.cpu().detach().numpy()\n","    kc_df = pd.DataFrame(KC_output)\n","    kc_relu_df = pd.DataFrame(KC_output_relu)\n","\n","\n","    # 5. SVM 평가 (train/test 나누지 않고 전체로)\n","    X_tr, X_te, y_tr, y_te = train_test_split(kc_relu_df, y_train, test_size=0.3)\n","\n","    results = {}\n","    for C in C_list:\n","        clf = SVC(C=C, kernel='linear')\n","        clf.fit(X_tr, y_tr)\n","        acc = clf.score(X_te, y_te)\n","        results[C] = acc\n","\n","    all_results_ran.append(results)\n","    print(f\"{i+1}번째 split 결과:\", results)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"u1LjTg9cn5Ny","executionInfo":{"status":"ok","timestamp":1754902914618,"user_tz":-540,"elapsed":30580,"user":{"displayName":"구경모","userId":"17143731857543251051"}},"outputId":"d229ee1b-8b27-44b8-f165-2575e5fb962f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1번째 split 결과: {0.1: 0.37333333333333335, 1: 0.37333333333333335, 10: 0.37333333333333335, 100: 0.37333333333333335}\n","2번째 split 결과: {0.1: 0.4666666666666667, 1: 0.4666666666666667, 10: 0.4666666666666667, 100: 0.4666666666666667}\n","3번째 split 결과: {0.1: 0.4533333333333333, 1: 0.4533333333333333, 10: 0.4533333333333333, 100: 0.4533333333333333}\n","4번째 split 결과: {0.1: 0.49333333333333335, 1: 0.49333333333333335, 10: 0.49333333333333335, 100: 0.49333333333333335}\n","5번째 split 결과: {0.1: 0.4066666666666667, 1: 0.4066666666666667, 10: 0.4066666666666667, 100: 0.4066666666666667}\n","6번째 split 결과: {0.1: 0.47333333333333333, 1: 0.47333333333333333, 10: 0.47333333333333333, 100: 0.47333333333333333}\n","7번째 split 결과: {0.1: 0.5266666666666666, 1: 0.5266666666666666, 10: 0.5266666666666666, 100: 0.5266666666666666}\n","8번째 split 결과: {0.1: 0.47333333333333333, 1: 0.47333333333333333, 10: 0.47333333333333333, 100: 0.47333333333333333}\n","9번째 split 결과: {0.1: 0.44, 1: 0.44, 10: 0.44, 100: 0.44}\n","10번째 split 결과: {0.1: 0.44, 1: 0.44, 10: 0.44, 100: 0.44}\n"]}]},{"cell_type":"code","source":["#syn_box_plot\n","c_values = {C: [] for C in C_list}\n","for C in C_list:\n","    for res in all_results_syn:\n","        c_values[C].append(res[C])\n","\n","plt.figure(figsize=(8, 5))\n","plt.ylim(0.4, 1)\n","plt.boxplot([c_values[C] for C in C_list], labels=C_list, showmeans=True)\n","plt.xlabel(\"C value\")\n","plt.ylabel(\"Accuracy\")\n","plt.title(\"SVM Accuracy by C (he_random Weight)\")\n","plt.grid(axis='y')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":524},"id":"VxrYCmpeCXHi","executionInfo":{"status":"ok","timestamp":1754960576969,"user_tz":-540,"elapsed":651,"user":{"displayName":"구경모","userId":"17143731857543251051"}},"outputId":"69253bef-7611-402c-c332-3b9c02bedf21"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stderr","text":["/tmp/ipython-input-1074963179.py:9: MatplotlibDeprecationWarning: The 'labels' parameter of boxplot() has been renamed 'tick_labels' since Matplotlib 3.9; support for the old name will be dropped in 3.11.\n","  plt.boxplot([c_values[C] for C in C_list], labels=C_list, showmeans=True)\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["#ran_1_box_plot\n","c_values = {C: [] for C in C_list}\n","for C in C_list:\n","    for res in all_results_ran:\n","        c_values[C].append(res[C])\n","\n","plt.figure(figsize=(8, 5))\n","plt.ylim(0.1, 1)\n","plt.boxplot([c_values[C] for C in C_list], labels=C_list, showmeans=True)\n","plt.xlabel(\"C value\")\n","plt.ylabel(\"Accuracy\")\n","plt.title(\"SVM Accuracy by C (connectome index)\")\n","plt.grid(axis='y')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":223},"id":"uJPwxer_6rtf","executionInfo":{"status":"error","timestamp":1754960544184,"user_tz":-540,"elapsed":32,"user":{"displayName":"구경모","userId":"17143731857543251051"}},"outputId":"6d3d88a2-c6b2-425d-8325-71d0decc0f50"},"execution_count":6,"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'all_results_ran' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m/tmp/ipython-input-2789561220.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mc_values\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0mC\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mC\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mC_list\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mC\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mC_list\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m     \u001b[0;32mfor\u001b[0m \u001b[0mres\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mall_results_ran\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m         \u001b[0mc_values\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mC\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mres\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mC\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'all_results_ran' is not defined"]}]},{"cell_type":"code","source":["#gridsearch (최적의 C값 및 kernel 탐색)\n","from sklearn.model_selection import GridSearchCV\n","param_grid = {\n","    'C': [0.1, 1, 10, 100],\n","    'kernel': ['linear', 'rbf']\n","}\n","\n","clf = SVC()\n","grid_search = GridSearchCV(clf, param_grid, cv=4)  # 5-fold cross-validation\n","\n","grid_search.fit(X_tr, y_tr)\n","\n","print(\"최적 파라미터:\", grid_search.best_params_)\n","print(\"최고 성능:\", grid_search.best_score_)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-07yVGIcBZay","executionInfo":{"status":"ok","timestamp":1754379236301,"user_tz":-540,"elapsed":69959,"user":{"displayName":"구경모","userId":"17143731857543251051"}},"outputId":"b9ba895d-ef98-4376-fa75-f8acfb7d0b03"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_split.py:805: UserWarning: The least populated class in y has only 1 members, which is less than n_splits=4.\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["최적 파라미터: {'C': 1, 'kernel': 'linear'}\n","최고 성능: 0.9028571428571428\n"]}]},{"cell_type":"code","source":["otp_unique = otp[['pre_root_id','post_root_id']]\n","mask_otp_norm = pd.crosstab(\n","    index=otp_unique['pre_root_id'],    # Row: ORN ID\n","    columns=otp_unique['post_root_id']  # Column: ALPN ID\n","    , values=otp['syn_count']           # syn count\n","    , aggfunc='sum'\n","    ).fillna(0)                         #NaN = 0\n","\n","mask_otp = torch.from_numpy(mask_otp_norm.T.values).float().to(device)  # (615, 2278)\n","\n","#------------ORN to ALPN mask: 'mask_otp'-----------------\n","alpn_ids=mask_otp_norm.columns\n","\n","ptk_unique=ptk[['pre_root_id', 'post_root_id']]\n","mask_ptk_norm = (\n","    pd.crosstab(\n","        index=ptk_unique['pre_root_id'],    # Row: ALPN ID\n","        columns=ptk_unique['post_root_id'], # Column: KC ID\n","        values=ptk['syn_count'],\n","        aggfunc='sum'\n","    )\n","    .reindex(index=alpn_ids,   # Make ALPN ID 615\n","             fill_value=0)\n","    .fillna(0)                 # NaN = 0\n",")\n","mask_ptk = torch.from_numpy(mask_ptk_norm.T.values).float().to(device)  # (4907,334)\n","\n","#-----------------------MaskedLinear()----------------------------\n","class MaskedLinear(nn.Module):\n","    def __init__(self, in_features, out_features, init_weight):\n","        super().__init__()\n","        self.register_buffer('mask', (init_weight>0).float().to(init_weight.device)) # Ensure mask is on the same device\n","        self.weight = nn.Parameter(torch.zeros(out_features, in_features, device=init_weight.device)) # Initialize weight on the same device\n","        nn.init.uniform_(self.weight, a=1/init_weight.max().item(), b=1)\n","        self.bias   = nn.Parameter(torch.zeros(out_features, device=init_weight.device)) # Initialize bias on the same device\n","\n","    def forward(self, x):\n","        w = self.weight * self.mask\n","        return F.linear(x, w, self.bias)\n","\n","#---------------------Odor Classifier()---------------------------\n","class Odor_classifier(nn.Module):\n","  def __init__(self,input_dim,output_dim, mask1, mask2):\n","    super().__init__()\n","    self.net=nn.Sequential(\n","        MaskedLinear(input_dim,615, mask1),\n","        nn.Identity(),\n","        MaskedLinear(615,4907, mask2),\n","        nn.Identity(),\n","        nn.Linear(4907,output_dim)\n","    )\n","  def forward(self, x):\n","    return self.net(x)\n","\n","model = Odor_classifier(input_dim=2278, output_dim=250, mask1=mask_otp, mask2=mask_ptk).to(device)\n","\n","criterion = nn.CrossEntropyLoss()\n","optimizer = optim.Adam(model.parameters(), lr=1e-4)\n","\n","# alpn, kc layer output 추출 모델 정의 및 인덱스 정의\n","def layer_output_extract(model, x):\n","  alpn_output = model.net[0](x)\n","  alpn_output_relu = model.net[1](alpn_output)\n","  kc_output = model.net[2](alpn_output_relu)\n","  kc_output_relu = model.net[3](kc_output)\n","  return alpn_output,alpn_output_relu , kc_output, kc_output_relu\n","\n","C_list = [0.1, 1, 10, 100]\n","all_results_ran_init = []\n","\n","for i in range(10):\n","    # 시드 고정 (각 반복마다 다르게)\n","    random.seed(i)\n","    np.random.seed(i)\n","    torch.manual_seed(i)\n","    torch.cuda.manual_seed_all(i)\n","\n","    # 1. 라벨 생성 및 인코딩\n","    cls_labels = [f'Odor_({j+1})' for j in range(250)]\n","    le = LabelEncoder()\n","    y_int = le.fit_transform(cls_labels)\n","    y_out = torch.tensor(y_int, dtype=torch.long)\n","\n","    # 2. 데이터셋 생성 (train)\n","    x_train = []\n","    y_train = []\n","    idx = torch.randint(0, 250, (1000,))\n","    for n in idx:\n","        noise = torch.normal(mean=0, std=0.2, size=(2278,))\n","        xi = pd.to_numeric(X_ann.iloc[n.item(), 0:], errors='coerce')\n","        xn = torch.tensor(xi.fillna(0).values, dtype=torch.float32) + noise\n","        x_train.append(xn)\n","        y_train.append(y_out[n])\n","    x_train = torch.stack(x_train).to(dtype=torch.float32)\n","    y_train = torch.stack(y_train).to(dtype=torch.long)\n","\n","\n","    # 4. feature projection (ORN → ALPN → KC)\n","    ALPN_output,ALPN_output_relu ,KC_output, KC_output_relu = layer_output_extract(model,x_train.to(device))\n","\n","    KC_output = KC_output.cpu().detach().numpy()\n","    KC_output_relu = KC_output_relu.cpu().detach().numpy()\n","    kc_df = pd.DataFrame(KC_output)\n","    kc_relu_df = pd.DataFrame(KC_output_relu)\n","\n","\n","    # 5. SVM 평가 (train/test 나누지 않고 전체로)\n","    X_tr, X_te, y_tr, y_te = train_test_split(kc_relu_df, y_train, test_size=0.3)\n","\n","    results = {}\n","    for C in C_list:\n","        clf = SVC(C=C, kernel='linear')\n","        clf.fit(X_tr, y_tr)\n","        acc = clf.score(X_te, y_te)\n","        results[C] = acc\n","\n","    all_results_ran_init.append(results)\n","    print(f\"{i+1}번째 split 결과:\", results)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3610O1vzKkq8","executionInfo":{"status":"ok","timestamp":1754379759909,"user_tz":-540,"elapsed":139739,"user":{"displayName":"구경모","userId":"17143731857543251051"}},"outputId":"348e35e5-bd8f-46cd-dd81-1288c965bba2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1번째 split 결과: {0.1: 0.87, 1: 0.87, 10: 0.87, 100: 0.87}\n","2번째 split 결과: {0.1: 0.8833333333333333, 1: 0.8833333333333333, 10: 0.8833333333333333, 100: 0.8833333333333333}\n","3번째 split 결과: {0.1: 0.8666666666666667, 1: 0.8666666666666667, 10: 0.8666666666666667, 100: 0.8666666666666667}\n","4번째 split 결과: {0.1: 0.8466666666666667, 1: 0.8466666666666667, 10: 0.8466666666666667, 100: 0.8466666666666667}\n","5번째 split 결과: {0.1: 0.8366666666666667, 1: 0.8366666666666667, 10: 0.8366666666666667, 100: 0.8366666666666667}\n","6번째 split 결과: {0.1: 0.8, 1: 0.8, 10: 0.8, 100: 0.8}\n","7번째 split 결과: {0.1: 0.7866666666666666, 1: 0.7866666666666666, 10: 0.7866666666666666, 100: 0.7866666666666666}\n","8번째 split 결과: {0.1: 0.8533333333333334, 1: 0.8533333333333334, 10: 0.8533333333333334, 100: 0.8533333333333334}\n","9번째 split 결과: {0.1: 0.81, 1: 0.81, 10: 0.81, 100: 0.81}\n","10번째 split 결과: {0.1: 0.8233333333333334, 1: 0.8233333333333334, 10: 0.8233333333333334, 100: 0.8233333333333334}\n"]}]},{"cell_type":"code","source":["#ran_1_box_plot\n","c_values = {C: [] for C in C_list}\n","for C in C_list:\n","    for res in all_results_ran_init:\n","        c_values[C].append(res[C])\n","\n","plt.figure(figsize=(8, 5))\n","plt.ylim(0.4, 1)\n","plt.boxplot([c_values[C] for C in C_list], labels=C_list, showmeans=True)\n","plt.xlabel(\"C value\")\n","plt.ylabel(\"Accuracy\")\n","plt.title(\"SVM Accuracy by C (Random Weight)\")\n","plt.grid(axis='y')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":223},"id":"1a0SLaDBMbTs","executionInfo":{"status":"error","timestamp":1754903061616,"user_tz":-540,"elapsed":57,"user":{"displayName":"구경모","userId":"17143731857543251051"}},"outputId":"a0feb57b-376b-434a-e0f6-c8c513962c68"},"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'all_results_ran_init' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m/tmp/ipython-input-2869606109.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mc_values\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0mC\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mC\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mC_list\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mC\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mC_list\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m     \u001b[0;32mfor\u001b[0m \u001b[0mres\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mall_results_ran_init\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m         \u001b[0mc_values\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mC\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mres\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mC\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'all_results_ran_init' is not defined"]}]},{"cell_type":"code","source":[],"metadata":{"id":"lXOSFScqMgOX"},"execution_count":null,"outputs":[]}]}